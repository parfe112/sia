---
description: 
globs: 
alwaysApply: true
---
# Astro Framework Documentation

## Project Setup

Our SIA Skin Center site uses Astro v5.5+ with the following configuration:

- **Rendering Mode**: Server-side rendering (SSR)
- **Adapter**: Node.js standalone adapter
- **CSS Framework**: Tailwind CSS v4
- **Animation Library**: AOS (Animate On Scroll)

## Astro Component Structure

### Basic Component Syntax

```astro
---
// Component script section (JavaScript/TypeScript)
interface Props {
  title: string;
  description?: string;
}

const { title, description = "Default description" } = Astro.props;

// Import other components
import SomeComponent from '../components/SomeComponent.astro';

// Component logic
const items = ["Item 1", "Item 2", "Item 3"];
---

<!-- Component template section (HTML) -->
<div class="component-wrapper">
  <h1>{title}</h1>
  {description && <p>{description}</p>}
  
  <ul>
    {items.map(item => (
      <li>{item}</li>
    ))}
  </ul>
  
  <SomeComponent />
</div>

<style>
  /* Component scoped styles */
  .component-wrapper {
    padding: 1rem;
  }
</style>

<script>
  // Client-side JavaScript
  document.addEventListener('DOMContentLoaded', () => {
    console.log('Component mounted');
  });
</script>
```

### Layouts

Our main layout file (`src/layouts/Layout.astro`) handles:

- Document structure
- Meta tags
- CSS imports
- AOS initialization

Layouts are used in page components:

```astro
---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<Layout title="Page Title" description="Page description">
  <Header />
  <main>
    <!-- Page content -->
  </main>
  <Footer />
</Layout>
```

## Routing

Astro uses file-based routing:

- `src/pages/index.astro` → `/`
- `src/pages/about.astro` → `/about`
- `src/pages/services/index.astro` → `/services`
- `src/pages/services/[id].astro` → `/services/:id` (dynamic route)

## Data Fetching

For SSR data fetching:

```astro
---
// In a page or component
export const prerender = false; // For SSR

const response = await fetch('https://api.example.com/data');
const data = await response.json();
---

<div>
  {data.map(item => (
    <div>{item.name}</div>
  ))}
</div>
```

## Adding Animations with AOS

AOS is integrated in the Layout component. Use it in any component:

```html
<div 
  data-aos="fade-up" 
  data-aos-duration="800" 
  data-aos-delay="100"
  class="..."
>
  Animated content
</div>
```

Common AOS animation types:
- `fade-up`, `fade-down`, `fade-left`, `fade-right`
- `zoom-in`, `zoom-out`
- `flip-up`, `flip-down`, `flip-left`, `flip-right`

## Working with Images

Always use Astro's built-in Image components for optimized image delivery:

```astro
---
// Import the Image component
import { Image, Picture } from 'astro:assets';

// Import images (static imports)
import myImage from '../assets/images/image.jpg';
---

<!-- Basic optimized image -->
<Image 
  src={myImage}
  alt="Description"
  width={800}
  height={600}
  class="..."
/>

<!-- Image with avif/webp formats -->
<Picture 
  src={myImage}
  alt="Description"
  formats={['avif', 'webp']}
  sizes="(max-width: 800px) 100vw, 800px"
  widths={[400, 800, 1200]}
  class="..."
/>

<!-- Remote image (must be from authorized domains in config) -->
<Image 
  src="https://example.com/image.jpg"
  alt="Description"
  width={1200}
  height={900}
  class="..."
/>

<!-- Image from public folder -->
<Image 
  src="/images/image.jpg"
  alt="Description"
  width={800}
  height={600}
  class="..."
/>
```

Benefits of using Astro's Image components:
- Automatic format conversion to modern formats (avif, webp)
- Responsive image handling with proper sizes and srcset attributes
- Lazy loading by default
- Optimized file sizes
- Prevents layout shifts with proper width/height

Best practices:
1. Always provide width and height to prevent layout shifts
2. Use `<Picture>` with formats array for multiple formats
3. Use widths array for responsive images
4. Set proper sizes attribute for responsive images
5. Always provide meaningful alt text for accessibility

To authorize remote image domains, add them to your Astro config:

```js
// astro.config.mjs
export default defineConfig({
  image: {
    domains: ["example.com", "images.unsplash.com"],
    // For more control:
    remotePatterns: [
      { protocol: "https", hostname: "**.example.com" }
    ]
  }
});
```

## Server Endpoints

Create API endpoints in Astro:

```ts
// src/pages/api/example.ts
export const prerender = false;

import type { APIRoute } from 'astro';

export const GET: APIRoute = async ({ params, request }) => {
  // Handle GET request
  return new Response(
    JSON.stringify({ message: 'Success' }),
    {
      status: 200,
      headers: {
        'Content-Type': 'application/json'
      }
    }
  );
};

export const POST: APIRoute = async ({ request }) => {
  const data = await request.json();
  // Process data...
  
  return new Response(
    JSON.stringify({ success: true }),
    { status: 200 }
  );
};
```

## Resources

- [Astro Documentation](mdc:https:/docs.astro.build)
- [Tailwind CSS Documentation](mdc:https:/tailwindcss.com)
- [AOS Documentation](mdc:https:/michalsnik.github.io/aos) 